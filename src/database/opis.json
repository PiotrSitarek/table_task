{
	"view": {
		"altViewDef": {
			"rem": "view definition was disabled since 'vdef' flag was set to 'false'"
		},
		"params": {
			"idExt": 953,
			"defaultFilter": {
				"alarm_status": "100,102,103"
			},
			"attributes": [
				{
					"format_as": "status_of_all",
					"def_value": "100",
					"is_user_insertable": false,
					"validator": null,
					"permitter": "if(row.alarm_status !== 101) allowEdit=true; else webix.message(me.trLabel('Unchangeable entity.'));",
					"label": "Status",
					"col_dtype": null,
					"name": "alarm_status",
					"is_form_editable": true,
					"options": [
						"100",
						"101",
						"102",
						"103"
					],
					"width": 60,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": false
				},
				{
					"format_as": "status_of_all",
					"def_value": "2",
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Severity",
					"col_dtype": null,
					"name": "alarm_severity",
					"is_form_editable": true,
					"options": [
						"0",
						"1",
						"2",
						"3",
						"4",
						"5"
					],
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": false
				},
				{
					"format_as": "textarea",
					"def_value": "alarm text",
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Comment",
					"col_dtype": null,
					"name": "comment",
					"is_form_editable": true,
					"options": null,
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": false,
					"is_user_editable": true,
					"is_cell_editable": true
				},
				{
					"format_as": "textarea",
					"def_value": "alarm text",
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Application",
					"col_dtype": null,
					"name": "alarm_application",
					"is_form_editable": false,
					"options": [
						"0",
						"2",
						"5"
					],
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "textarea",
					"def_value": "alarm node",
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Node",
					"col_dtype": null,
					"name": "alarm_node",
					"is_form_editable": false,
					"options": [
						"0",
						"2",
						"5"
					],
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "textarea",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Object",
					"col_dtype": null,
					"name": "alarm_object",
					"is_form_editable": false,
					"options": null,
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "script",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Opis",
					"col_dtype": null,
					"name": "alarm_textlong",
					"is_form_editable": false,
					"options": null,
					"width": 240,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "timestamp",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "First occurence",
					"col_dtype": null,
					"name": "alarm_firstevent_ts",
					"is_form_editable": false,
					"options": null,
					"width": 80,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "timestamp",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Last occurence",
					"col_dtype": null,
					"name": "alarm_lastevent_ts",
					"is_form_editable": false,
					"options": null,
					"width": 80,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "timestamp",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Last update",
					"col_dtype": null,
					"name": "alarm_lastupdate_ts",
					"is_form_editable": false,
					"options": null,
					"width": 80,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "textarea",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Alarm count",
					"col_dtype": null,
					"name": "alarm_count",
					"is_form_editable": false,
					"options": null,
					"width": 50,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "textarea",
					"def_value": "alarm procedure",
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Procedure",
					"col_dtype": null,
					"name": "alarm_procedure",
					"is_form_editable": false,
					"options": null,
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "textarea",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Impacted servies label",
					"col_dtype": null,
					"name": "itcust_impactedserviceslabels",
					"is_form_editable": false,
					"options": null,
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": false,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "select",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Owner ID",
					"col_dtype": null,
					"name": "alarm_ownerid",
					"is_form_editable": false,
					"options": "rest/rest_api/data_view/option_list?src_type=user",
					"width": 70,
					"is_form_viewable": true,
					"is_cell_viewable": false,
					"is_user_editable": true,
					"is_cell_editable": true
				},
				{
					"format_as": "textarea",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Alarm duration",
					"col_dtype": null,
					"name": "alarm_duration",
					"is_form_editable": true,
					"options": null,
					"width": 40,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": false,
					"is_cell_editable": false
				},
				{
					"format_as": "script",
					"def_value": "Zatwierdzono",
					"is_user_insertable": false,
					"validator": null,
					"permitter": null,
					"label": "Nagios Ack Comment",
					"col_dtype": null,
					"name": "gwnagios_ack_comment",
					"is_form_editable": true,
					"options": null,
					"width": 240,
					"is_form_viewable": true,
					"is_cell_viewable": false,
					"is_user_editable": true,
					"is_cell_editable": false
				},
				{
					"format_as": "script",
					"def_value": "Wyłączono",
					"is_user_insertable": false,
					"validator": null,
					"permitter": null,
					"label": "Nagios Postpone Comment",
					"col_dtype": null,
					"name": "gwnagios_postpone_comment",
					"is_form_editable": true,
					"options": null,
					"width": 240,
					"is_form_viewable": true,
					"is_cell_viewable": false,
					"is_user_editable": true,
					"is_cell_editable": false
				},
				{
					"format_as": "timestamp",
					"def_value": null,
					"is_user_insertable": false,
					"validator": null,
					"permitter": null,
					"label": "Nagios Postpone To",
					"col_dtype": null,
					"name": "gwnagios_postpone_to",
					"is_form_editable": true,
					"options": null,
					"width": 60,
					"is_form_viewable": true,
					"is_cell_viewable": false,
					"is_user_editable": true,
					"is_cell_editable": false
				},
				{
					"format_as": "select",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Select",
					"col_dtype": null,
					"name": "test_select",
					"is_form_editable": true,
					"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
					"width": 100,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": true
				},
				{
					"format_as": "multiselect",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Multiselect",
					"col_dtype": null,
					"name": "test_multiselect",
					"is_form_editable": true,
					"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
					"width": 100,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": true
				},
				{
					"format_as": "combo",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Combo",
					"col_dtype": null,
					"name": "test_combo",
					"is_form_editable": true,
					"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
					"width": 100,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": true
				},
				{
					"format_as": "select:tr",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Selecttr",
					"col_dtype": null,
					"name": "test_selecttr",
					"is_form_editable": true,
					"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
					"width": 100,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": true
				},
				{
					"format_as": "multiselect:tr",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Multiselecttr",
					"col_dtype": null,
					"name": "test_multiselecttr",
					"is_form_editable": true,
					"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
					"width": 100,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": true
				},
				{
					"format_as": "multicombo",
					"def_value": null,
					"is_user_insertable": true,
					"validator": null,
					"permitter": null,
					"label": "Multicombo",
					"col_dtype": null,
					"name": "test_multicombo",
					"is_form_editable": true,
					"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
					"width": 100,
					"is_form_viewable": true,
					"is_cell_viewable": true,
					"is_user_editable": true,
					"is_cell_editable": true
				}
			],
			"id": 420,
			"label": "Related alarms",
			"tools": [
				{
					"component": "Tool",
					"icon": "rci-filters",
					"isOn": "return nearest?.dataStore?.isFilterVisible === undefined ? false : nearest?.dataStore?.isFilterVisible",
					"action": "const ds = nearest.dataStore;\n//ds.isFilterVisible=(ds.isFilterVisible === undefined) ? true : !ds.isFilterVisible;\nnearest.setDataStore({isFilterVisible : ds.isFilterVisible === undefined ? true : !ds.isFilterVisible});\nconsole.log('TODO powinien pojawić wiersz do filtrowania. Wymagane obsłużenie flagi isFilterVisible');",
					"tool_id": 421,
					"id": "Filter",
					"label": "Filter",
					"isActive": "return true"
				},
				{
					"action_off": "dispatch({ type: \"UPD_DETAIL_CONTENT\", payload: {...nearest, opened_by: itemKey}});",
					"component": "Tool",
					"icon": "mdi mdi-square-edit-outline",
					"action": "dispatch({ type: 'UPD_DETAIL_CONTENT', payload: {\n  opened_by: itemKey,\n  content: [{\n    component: 'Layout',\n    rows: [\n      {component: 'Toolbar',\n        rem: 'poniżej powinny być użyte właściwe narzędzia (z action_console), gdyż w tej formie będzie problem z tłumaczeniem labeli aczkolwiek akurat w tym miejscu (`right`) nie potrzebują tłumaczeń',\n        center: [{ component: 'Label', label: 'Deatils' }],\n        right: [{\n            'component':  'Tool',\n            'icon':       'mdi mdi-content-save-outline',\n            'action':     'nearest.setDataStore({doSave: true});',\n            'isActive':   'return nearest?.dataStore?.isDirty === true',\n            'label':      'Save',\n        }, {\n            'component':  'Tool',\n            'icon':       'mdi mdi-square-edit-outline',  'rem': 'TODO: NKM prośba o dodanie poprawnej ikonki',\n            'name':       'close portal',\n            'action':     'dispatch({ type: \"UPD_DETAIL_CONTENT\", payload: {opened_by: null}});',\n            'label':      'Close',\n        }],\n      },\n      {component: 'Form'},\n    ]\n  }]\n}});",
					"tool_id": 433,
					"id": "CI Editor",
					"label": "CI Editor",
					"isActive": "//const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-filter-variant-minus",
					"isOn": "return false",
					"action": "// new Function('document', 'dispatch', 'state', 'consumers', 'nDateStore', 'nSetDataStore', 'event', action)\n// console.log(`Rendering: Tool: Default filtering: exec`, {arguments}, {props}, 'this:', this);\nnearest.setDataStore({filtering: nearest.dataStore.defFilter}); // nie wiem czy to jest właściwa akcja, ale to z pewnoscią jest dobry przykład - reset filtru do wartości domyślnej",
					"tool_id": 422,
					"id": "Default filtering",
					"label": "Default filtering"
				},
				{
					"component": "Tool",
					"icon": "rci-open-incident",
					"action": "dispatch({ type: 'UPD_DETAIL_CONTENT', payload: {\n  opened_by: itemKey,\n  content: [{\n    component: 'Layout',\n    createConsumerContext: 'relatedData',\n    rows: [\n      {component: 'Toolbar',\n        rem: 'poniżej powinny być użyte właściwe narzędzia (z action_console), gdyż w tej formie będzie problem z tłumaczeniem labeli aczkolwiek akurat w tym miejscu (`right`) nie potrzebują tłumaczeń',\n        minWidth: 100,\n        center: [{ component: 'Label', label: 'Deatils' }],\n        right: [{\n            'component':  'Tool',\n            'icon':       'mdi mdi-content-save-outline',\n            'action':     'nearest.setDataStore({doSave: true});',\n            'isActive':   'return nearest?.dataStore?.isDirty === true',\n            'label':      'Save',\n        }, {\n            'component':  'Tool',\n            'icon':       'mdi mdi-square-edit-outline',  'rem': 'TODO: NKM prośba o dodanie poprawnej ikonki',\n            'name':       'close portal',\n            'action':     'dispatch({ type: \"UPD_DETAIL_CONTENT\", payload: {opened_by: null}});',\n            'label':      'Close',\n        }],\n      },\n      {\n        component: 'Form',\n        getDataContext: `\n          // new Function('document', 'dispatch', 'useSelector', 'dsContext', 'store', 'state', ...)\n          // poniżej przykład ustawienia kontekstu danych do prezentacji w świeżo otwartym formularzu na podstawie zaznaczonego elementu w tabeli\n          const src = dsContext?.consumers[1][0];                                   // źdódłowy kontekst (tu jest element zaznaczony w tabeli)\n          const [dataStore, setDataStore] = dsContext?.nearest;                     // kontekst który ma być prezentowany w formularzu\n          const cid = (src.checked && src.checked[0]) ? src.checked[0] : undefined; // sprawdzenie zaznaczonego konetstowo wpisu w tabeli\n          const url = {descUrl: \"property_view?visualize_as=table&dsrc=manual_notification_email&exchange_request_data_id=\"+cid};\n          cid && dataStore.descUrl === undefined && setDataStore({\n            ...dataStore,\n            ...url,\n          });\n        `,\n        initialDSTransform: `\n          // new Function('document', 'dispatch', 'store', 'state', 'dataStore', ...)\n          // inicjalna modyfikacja danych (możliwa też modyfikacja atrybutów i całego dataStore)\n          dataStore.isDirty = true; // bo poniżej wprawdzamy pierwszą modyfikację i nie chcemy odświeżania danych w zwiazku z tym\n          dataStore.data[0].label = \"przykładowa modyfikacja\";\n          dataStore.checked = undefined;\n        `\n      },\n    ]\n  }]\n}});",
					"tool_id": 956,
					"id": "open_ca_sdm_incident",
					"label": "Open CA SDM incident",
					"isActive": "return nearest?.dataStore?.checked?.length||false;"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-filter-variant-plus",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 962,
					"id": "select filter",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "Select filter"
				},
				{
					"tool_id": 13180,
					"id": "refresh nagios",
					"label": "Refresh Nagios alarm"
				},
				{
					"component": "Tool",
					"icon": "rci-assigne-to",
					"action": "// pobierz zaznaczone wiersze i wybierz unikalne (TO DO: unikalnosc powinien zapewnic frontend - na razie dubluje wpisy)\n                      const uniqueItems = [...new Set(nearest.dataStore.checked)];\nif (uniqueItems.length > 0){\n  //budowa tablicy pod obiekty dla body do requestu POST\n                        let ids_selected_arr = {\n                          cells: []\n                        };\n                        \n                        //wypelnij tablice obiektami json - format narzucony przez koncowke rest i webix-a\n                        for(var i in uniqueItems) {    \n                          var item = uniqueItems[i];   \n                          ids_selected_arr.cells.push({ \n                            \"row\" : item,\n                            \"id\"  : item\n                          });\n                        }\n                        \n                        //konwertuj na jsona\n                        const data = JSON.stringify(ids_selected_arr);\n                        \n                        //wyslij post\n                        fetch('/Console/rest/rest_api/data_view/alarms_assign', {\n                          method: 'POST',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            mySessionId: '00000000-0000-0000-0000-000000000001', //TO DO: zmiana na realny id session\n                            mySessionLanguage: 'en_US'                           //TO DO: pobierane dynamicznie\n                          },\n                          body:data,\n                        })\n                        .then(response => response.json())\n                        .then(result => {\n                          console.log('Success:', result);\n                        })\n                        .catch(error => {\n                          console.log('Error:', error);\n                        });\n                      }else {\n                        console.log('Select at least one alarm.');\n                        //TO DO: wypisane komunikatu do loggera gui\n                        return;\n                      }",
					"tool_id": 954,
					"id": "assign",
					"label": "Assign",
					"isActive": "const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
				},
				{
					"component": "Tool",
					"icon": "rci-open-incident",
					"action": "// pobierz zaznaczone wiersze i wybierz unikalne (TO DO: unikalnosc powinien zapewnic frontend - na razie dubluje wpisy)\n                      const uniqueItems = [...new Set(nearest.dataStore.checked)];\nif (uniqueItems.length > 0){\n  //budowa tablicy pod obiekty dla body do requestu POST\n                        let ids_selected_arr = {\n                          cells: []\n                        };\n                        \n                        //wypelnij tablice obiektami json - format narzucony przez koncowke rest i webix-a\n                        for(var i in uniqueItems) {    \n                          var item = uniqueItems[i];   \n                          ids_selected_arr.cells.push({ \n                            \"row\" : item,\n                            \"id\"  : item\n                          });\n                        }\n                        \n                        //konwertuj na jsona\n                        const data = JSON.stringify(ids_selected_arr);\n                        \n                        //wyslij post\n                        fetch('/Console/rest/rest_api/data_view/alarms_ticket', {\n                          method: 'POST',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            mySessionId: '00000000-0000-0000-0000-000000000001', //TO DO: zmiana na realny id session\n                            mySessionLanguage: 'en_US'                           //TO DO: pobierane dynamicznie\n                          },\n                          body:data,\n                        })\n                        .then(response => response.json())\n                        .then(result => {\n                          console.log('Success:', result);\n                        })\n                        .catch(error => {\n                          console.log('Error:', error);\n                        });\n                      }else {\n                        console.log('Select at least one alarm.');\n                        //TO DO: wypisane komunikatu do loggera gui\n                        return;\n                      }",
					"tool_id": 955,
					"id": "open incident",
					"label": "Open incident",
					"isActive": "const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
				},
				{
					"component": "Tool",
					"icon": "rci-collapse-element",
					"action": "// pobierz zaznaczone wiersze i wybierz unikalne (TO DO: unikalnosc powinien zapewnic frontend - na razie dubluje wpisy)\n                      const uniqueItems = [...new Set(nearest.dataStore.checked)];\nif (uniqueItems.length > 0){\n  //budowa tablicy pod obiekty dla body do requestu POST\n                        let ids_selected_arr = {\n                          cells: []\n                        };\n                        \n                        //wypelnij tablice obiektami json - format narzucony przez koncowke rest i webix-a\n                        for(var i in uniqueItems) {    \n                          var item = uniqueItems[i];   \n                          ids_selected_arr.cells.push({ \n                            \"row\" : item,\n                            \"id\"  : item\n                          });\n                        }\n                        \n                        //konwertuj na jsona\n                        const data = JSON.stringify(ids_selected_arr);\n                        \n                        //wyslij post\n                        fetch('/Console/rest/rest_api/data_view/alarms_ticket', {\n                          method: 'POST',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            mySessionId: '00000000-0000-0000-0000-000000000001', //TO DO: zmiana na realny id session\n                            mySessionLanguage: 'en_US'                           //TO DO: pobierane dynamicznie\n                          },\n                          body:data,\n                        })\n                        .then(response => response.json())\n                        .then(result => {\n                          console.log('Success:', result);\n                        })\n                        .catch(error => {\n                          console.log('Error:', error);\n                        });\n                      }else {\n                        console.log('Select at least one alarm.');\n                        //TO DO: wypisane komunikatu do loggera gui\n                        return;\n                      }",
					"tool_id": 957,
					"id": "close alarm",
					"label": "Close alarm",
					"isActive": "const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
				},
				{
					"component": "Tool",
					"icon": "rci-change-severity",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 958,
					"id": "change severity",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "Change severity"
				},
				{
					"component": "Tool",
					"icon": "rci-changelogs",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 959,
					"id": "changelog",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "Changelog"
				},
				{
					"component": "Tool",
					"icon": "rci-changelogs",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 436,
					"id": "changelog_table",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "Changelog Table"
				},
				{
					"component": "Tool",
					"icon": "rci-changelogs",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 960,
					"id": "chat_from_table_RW",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "Chat from table RW"
				},
				{
					"component": "Tool",
					"icon": "rci-changelogs",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 961,
					"id": "chat_from_table_RO",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "Chat from table RO"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-email-outline",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 423,
					"id": "email_notification",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "eMAIL Notification"
				},
				{
					"tool_id": 966,
					"id": "multi_channel_notifications",
					"label": "Notifications"
				},
				{
					"tool_id": 977,
					"id": "perform_actions",
					"label": "Perform an action"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-message-alert-outline",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 424,
					"id": "sms_notification",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "SMS Notification"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-delete-outline",
					"isOn": false,
					"action": "console.log('TODO action');",
					"tool_id": 427,
					"id": "delete entry",
					"rem": "parametry dla reactowej wersji aplikacji:",
					"label": "delete entry"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-mdi mdi-plus-box-outline",
					"action": "const ds = nearest.dataStore;\nconst newRow = Object.create(ds.items);\n\n// ustawianie inicjalnych wartości atrybutów zgodnie z konfiguracją CI (w data_description), tylko tych które są widoczne w kolumnach\nlet attrs =  ds.attributes;\nfor(let i=0; i< attrs.length; i++){\n  //ustawianie domyślnych wartości\n  //RBU -> poniżej propozycja obsłużenia pustych domyślnych wartości\n  //if(attrs[i].def_value || attrs[i].def_value==''){\n  if(attrs[i].def_value){\n    newRow[attrs[i].name] = attrs[i].def_value;\n  }\n}\n//TODO - obsłużyć dynamiczne wartości w def_value\n\nnewRow.updated_by = {updated_by:{web:{new_row: []}}, id:null};\n//generowanie tymczasowego unikalnego identyfikatora dla wiersza\nnewRow.id = new Date().getTime();\n\n//zaznaczenie dodanego wiersza\nds.checked = [newRow.id];\n\n//ds.items[newRow.id] = newRow;\nds.data.unshift(newRow);\nds.isDirty = true;\n\nnearest.setDataStore({...ds});",
					"tool_id": 428,
					"id": "new entry",
					"label": "new entry",
					"isActive": "return true"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-content-copy",
					"action": "const ds = nearest.dataStore;\n// pobierz zaznaczone wiersze i wybierz unikalne - lista id\nlet uniqueItems = [...new Set(ds.checked)];\nlet newData = [...nearest.dataStore.data];\n\n//wybieranie wiersza do skopiowania\nif (uniqueItems.length > 0){\n  let copiedRows = [];\n  for (let i = 0; i < uniqueItems.length; i++){\n  //kopiowanie wiersza\n    let copiedRow = Object.assign({}, ds.items[uniqueItems[i]]);\n    copiedRow.updated_by = {web:{new_row: [copiedRow.id]}};\n    copiedRow.updated_by.web.new_row = copiedRow.id;\n    //copiedRow.id = null;\n    copiedRow.id = new Date().getTime();\n    newData.unshift(copiedRow);\n  }\n    \n  //ds.isDirty = true;\n  nearest.setDataStore(\n    {...ds,\n    data: newData,\n    isDirty: true,\n    }\n  );                      \n  //nearest.setDataStore({...ds});\n}",
					"tool_id": 429,
					"id": "duplicate entry",
					"label": "duplicate entry",
					"isActive": "return nearest?.dataStore?.checked.length > 0 ? true : false"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-file-download-outline",
					"action": "nearest.setDataStore({doExport: true});",
					"tool_id": 430,
					"id": "export to xlsx",
					"label": "Export to XLSX",
					"isActive": "return true"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-content-save-outline",
					"action": "nearest.setDataStore({doSave: true});",
					"tool_id": 431,
					"id": "save changes",
					"label": "Save",
					"isActive": "return nearest?.dataStore?.isDirty === true"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-content-save-move-outline",
					"isOn": "return nearest?.dataStore?.isRelToCI === true",
					"action": "const ds = nearest.dataStore;\nnearest.setDataStore({isRelToCI : ds.isRelToCI === undefined ? true : !ds.isRelToCI});\nconsole.log('TODO: Powinien wyświetlić się formularz Relation to CI. Obsłużyć flagę isRelToCI ');",
					"tool_id": 432,
					"id": "Relation to CI",
					"label": "Relation to CI",
					"isActive": "return nearest?.dataStore?.checked.length > 0 ? true : false"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-logout-variant",
					"isOn": "return nearest?.dataStore?.isRelFromCI === true",
					"action": "const ds = nearest.dataStore;\nnearest.setDataStore({isRelFromCI : ds.isRelFromCI === undefined ? true : !ds.isRelFromCI});\nconsole.log('TODO: Powinien wyświetlić się formularz Relation to CI. Obsłużyć flagę isRelFromCI ');",
					"tool_id": 434,
					"id": "Relation from CI",
					"label": "Relation from CI",
					"isActive": "return nearest?.dataStore?.checked.length > 0 ? true : false"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-view-compact-outline",
					"isOn": "return nearest?.dataStore?.isTableEditor === true",
					"action": "const ds = nearest.dataStore;\n//ds.isTableEditor = (ds.isTableEditor === undefined) ? true : false;\nnearest.setDataStore({isTableEditor : ds.isTableEditor === undefined ? true : false});\nconsole.log('TODO: Powinien wyświetlić się formularz edycji kolumn. Obsłużyć flagę isTableEditor');",
					"tool_id": 435,
					"id": "View editor",
					"label": "View Editor",
					"isActive": "return true"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-arrow-up",
					"action": "const ds = nearest.dataStore;\nlet newChecked = [];\n  \nlet uniqueItems = [...new Set(ds.checked)];\nif (uniqueItems.length > 0){\n  for (let i = 0; i < ds.data.length; i++){\n    if (ds.checked[0] == ds.data[i].id){\n      if (i == 0){\n        newChecked[0] = ds.data[ds.data.length-1].id;\n      }else {\n        newChecked[0] = ds.data[i-1].id;\n      }\n      break;\n    }\n  }\n  \n} else {\n  newChecked[0] = ds.data[ds.data.length-1].id;\n}\nnearest.setDataStore({checked : newChecked});",
					"tool_id": 425,
					"id": "previous entry",
					"label": "previous entry",
					"isActive": "if (nearest?.dataStore?.data === undefined) return false; return nearest?.dataStore?.data.length > 0 ? true : false;"
				},
				{
					"component": "Tool",
					"icon": "mdi mdi-arrow-down",
					"action": "const ds = nearest.dataStore;\nlet newChecked = [];\n  \nlet uniqueItems = [...new Set(ds.checked)];\nif (uniqueItems.length > 0){\n  for (let i = 0; i < ds.data.length; i++){\n    if (ds.checked[0] == ds.data[i].id){\n      if (i == (ds.data.length - 1)){\n        newChecked[0] = ds.data[0].id;\n      }else {\n        newChecked[0] = ds.data[i+1].id;\n      }\n      break;\n    }\n  }\n  \n} else {\n  newChecked[0] = ds.data[0].id;\n}\nnearest.setDataStore({checked : newChecked});",
					"tool_id": 426,
					"id": "next entry",
					"label": "next entry",
					"isActive": "if (nearest?.dataStore?.data === undefined) return false; return nearest?.dataStore?.data.length > 0 ? true : false;"
				}
			],
			"url": "rest/rest_api/data_view/alarms?id=358"
		},
		"viewParams": {
			"component": "Layout",
			"createConsumerContext": "alarmContext",
			"rows": [
				{
					"component": "Toolbar",
					"left": [
						{
							"component": "Label",
							"color": "solid",
							"background": "transparent",
							"icon": null,
							"label": "tr:alarms",
							"id": "TODO1"
						}
					]
				},
				{
					"component": "Toolbar",
					"left": [
						{
							"component": "Label",
							"color": "solid",
							"background": "transparent",
							"icon": null,
							"label": "TODO nazwa elementu z drzewa",
							"id": "TODO2"
						},
						{
							"component": "Label",
							"color": "solid",
							"background": "light",
							"icon": null,
							"label": "TODO liczba obok elementu w drzewie",
							"id": "TODO3"
						}
					]
				},
				{
					"component": "Toolbar",
					"left": [
						{
							"component": "Tool",
							"icon": "rci-filters",
							"isOn": "return nearest?.dataStore?.isFilterVisible === undefined ? false : nearest?.dataStore?.isFilterVisible",
							"action": "const ds = nearest.dataStore;\n//ds.isFilterVisible=(ds.isFilterVisible === undefined) ? true : !ds.isFilterVisible;\nnearest.setDataStore({isFilterVisible : ds.isFilterVisible === undefined ? true : !ds.isFilterVisible});\nconsole.log('TODO powinien pojawić wiersz do filtrowania. Wymagane obsłużenie flagi isFilterVisible');",
							"tool_id": 421,
							"id": "Filter",
							"label": "Filter",
							"isActive": "return true"
						},
						{
							"action_off": "dispatch({ type: \"UPD_DETAIL_CONTENT\", payload: {...nearest, opened_by: itemKey}});",
							"component": "Tool",
							"icon": "mdi mdi-square-edit-outline",
							"action": "dispatch({ type: 'UPD_DETAIL_CONTENT', payload: {\n  opened_by: itemKey,\n  content: [{\n    component: 'Layout',\n    rows: [\n      {component: 'Toolbar',\n        rem: 'poniżej powinny być użyte właściwe narzędzia (z action_console), gdyż w tej formie będzie problem z tłumaczeniem labeli aczkolwiek akurat w tym miejscu (`right`) nie potrzebują tłumaczeń',\n        center: [{ component: 'Label', label: 'Deatils' }],\n        right: [{\n            'component':  'Tool',\n            'icon':       'mdi mdi-content-save-outline',\n            'action':     'nearest.setDataStore({doSave: true});',\n            'isActive':   'return nearest?.dataStore?.isDirty === true',\n            'label':      'Save',\n        }, {\n            'component':  'Tool',\n            'icon':       'mdi mdi-square-edit-outline',  'rem': 'TODO: NKM prośba o dodanie poprawnej ikonki',\n            'name':       'close portal',\n            'action':     'dispatch({ type: \"UPD_DETAIL_CONTENT\", payload: {opened_by: null}});',\n            'label':      'Close',\n        }],\n      },\n      {component: 'Form'},\n    ]\n  }]\n}});",
							"tool_id": 433,
							"id": "CI Editor",
							"label": "CI Editor",
							"isActive": "//const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-filter-variant-minus",
							"isOn": "return false",
							"action": "// new Function('document', 'dispatch', 'state', 'consumers', 'nDateStore', 'nSetDataStore', 'event', action)\n// console.log(`Rendering: Tool: Default filtering: exec`, {arguments}, {props}, 'this:', this);\nnearest.setDataStore({filtering: nearest.dataStore.defFilter}); // nie wiem czy to jest właściwa akcja, ale to z pewnoscią jest dobry przykład - reset filtru do wartości domyślnej",
							"tool_id": 422,
							"id": "Default filtering",
							"label": "Default filtering"
						},
						{
							"component": "Tool",
							"icon": "rci-open-incident",
							"action": "dispatch({ type: 'UPD_DETAIL_CONTENT', payload: {\n  opened_by: itemKey,\n  content: [{\n    component: 'Layout',\n    createConsumerContext: 'relatedData',\n    rows: [\n      {component: 'Toolbar',\n        rem: 'poniżej powinny być użyte właściwe narzędzia (z action_console), gdyż w tej formie będzie problem z tłumaczeniem labeli aczkolwiek akurat w tym miejscu (`right`) nie potrzebują tłumaczeń',\n        minWidth: 100,\n        center: [{ component: 'Label', label: 'Deatils' }],\n        right: [{\n            'component':  'Tool',\n            'icon':       'mdi mdi-content-save-outline',\n            'action':     'nearest.setDataStore({doSave: true});',\n            'isActive':   'return nearest?.dataStore?.isDirty === true',\n            'label':      'Save',\n        }, {\n            'component':  'Tool',\n            'icon':       'mdi mdi-square-edit-outline',  'rem': 'TODO: NKM prośba o dodanie poprawnej ikonki',\n            'name':       'close portal',\n            'action':     'dispatch({ type: \"UPD_DETAIL_CONTENT\", payload: {opened_by: null}});',\n            'label':      'Close',\n        }],\n      },\n      {\n        component: 'Form',\n        getDataContext: `\n          // new Function('document', 'dispatch', 'useSelector', 'dsContext', 'store', 'state', ...)\n          // poniżej przykład ustawienia kontekstu danych do prezentacji w świeżo otwartym formularzu na podstawie zaznaczonego elementu w tabeli\n          const src = dsContext?.consumers[1][0];                                   // źdódłowy kontekst (tu jest element zaznaczony w tabeli)\n          const [dataStore, setDataStore] = dsContext?.nearest;                     // kontekst który ma być prezentowany w formularzu\n          const cid = (src.checked && src.checked[0]) ? src.checked[0] : undefined; // sprawdzenie zaznaczonego konetstowo wpisu w tabeli\n          const url = {descUrl: \"property_view?visualize_as=table&dsrc=manual_notification_email&exchange_request_data_id=\"+cid};\n          cid && dataStore.descUrl === undefined && setDataStore({\n            ...dataStore,\n            ...url,\n          });\n        `,\n        initialDSTransform: `\n          // new Function('document', 'dispatch', 'store', 'state', 'dataStore', ...)\n          // inicjalna modyfikacja danych (możliwa też modyfikacja atrybutów i całego dataStore)\n          dataStore.isDirty = true; // bo poniżej wprawdzamy pierwszą modyfikację i nie chcemy odświeżania danych w zwiazku z tym\n          dataStore.data[0].label = \"przykładowa modyfikacja\";\n          dataStore.checked = undefined;\n        `\n      },\n    ]\n  }]\n}});",
							"tool_id": 956,
							"id": "open_ca_sdm_incident",
							"label": "Open CA SDM incident",
							"isActive": "return nearest?.dataStore?.checked?.length||false;"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-filter-variant-plus",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 962,
							"id": "select filter",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "Select filter"
						},
						{
							"tool_id": 13180,
							"id": "refresh nagios",
							"label": "Refresh Nagios alarm"
						},
						{
							"component": "Tool",
							"icon": "rci-assigne-to",
							"action": "// pobierz zaznaczone wiersze i wybierz unikalne (TO DO: unikalnosc powinien zapewnic frontend - na razie dubluje wpisy)\n                      const uniqueItems = [...new Set(nearest.dataStore.checked)];\nif (uniqueItems.length > 0){\n  //budowa tablicy pod obiekty dla body do requestu POST\n                        let ids_selected_arr = {\n                          cells: []\n                        };\n                        \n                        //wypelnij tablice obiektami json - format narzucony przez koncowke rest i webix-a\n                        for(var i in uniqueItems) {    \n                          var item = uniqueItems[i];   \n                          ids_selected_arr.cells.push({ \n                            \"row\" : item,\n                            \"id\"  : item\n                          });\n                        }\n                        \n                        //konwertuj na jsona\n                        const data = JSON.stringify(ids_selected_arr);\n                        \n                        //wyslij post\n                        fetch('/Console/rest/rest_api/data_view/alarms_assign', {\n                          method: 'POST',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            mySessionId: '00000000-0000-0000-0000-000000000001', //TO DO: zmiana na realny id session\n                            mySessionLanguage: 'en_US'                           //TO DO: pobierane dynamicznie\n                          },\n                          body:data,\n                        })\n                        .then(response => response.json())\n                        .then(result => {\n                          console.log('Success:', result);\n                        })\n                        .catch(error => {\n                          console.log('Error:', error);\n                        });\n                      }else {\n                        console.log('Select at least one alarm.');\n                        //TO DO: wypisane komunikatu do loggera gui\n                        return;\n                      }",
							"tool_id": 954,
							"id": "assign",
							"label": "Assign",
							"isActive": "const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
						},
						{
							"component": "Tool",
							"icon": "rci-open-incident",
							"action": "// pobierz zaznaczone wiersze i wybierz unikalne (TO DO: unikalnosc powinien zapewnic frontend - na razie dubluje wpisy)\n                      const uniqueItems = [...new Set(nearest.dataStore.checked)];\nif (uniqueItems.length > 0){\n  //budowa tablicy pod obiekty dla body do requestu POST\n                        let ids_selected_arr = {\n                          cells: []\n                        };\n                        \n                        //wypelnij tablice obiektami json - format narzucony przez koncowke rest i webix-a\n                        for(var i in uniqueItems) {    \n                          var item = uniqueItems[i];   \n                          ids_selected_arr.cells.push({ \n                            \"row\" : item,\n                            \"id\"  : item\n                          });\n                        }\n                        \n                        //konwertuj na jsona\n                        const data = JSON.stringify(ids_selected_arr);\n                        \n                        //wyslij post\n                        fetch('/Console/rest/rest_api/data_view/alarms_ticket', {\n                          method: 'POST',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            mySessionId: '00000000-0000-0000-0000-000000000001', //TO DO: zmiana na realny id session\n                            mySessionLanguage: 'en_US'                           //TO DO: pobierane dynamicznie\n                          },\n                          body:data,\n                        })\n                        .then(response => response.json())\n                        .then(result => {\n                          console.log('Success:', result);\n                        })\n                        .catch(error => {\n                          console.log('Error:', error);\n                        });\n                      }else {\n                        console.log('Select at least one alarm.');\n                        //TO DO: wypisane komunikatu do loggera gui\n                        return;\n                      }",
							"tool_id": 955,
							"id": "open incident",
							"label": "Open incident",
							"isActive": "const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
						},
						{
							"component": "Tool",
							"icon": "rci-collapse-element",
							"action": "// pobierz zaznaczone wiersze i wybierz unikalne (TO DO: unikalnosc powinien zapewnic frontend - na razie dubluje wpisy)\n                      const uniqueItems = [...new Set(nearest.dataStore.checked)];\nif (uniqueItems.length > 0){\n  //budowa tablicy pod obiekty dla body do requestu POST\n                        let ids_selected_arr = {\n                          cells: []\n                        };\n                        \n                        //wypelnij tablice obiektami json - format narzucony przez koncowke rest i webix-a\n                        for(var i in uniqueItems) {    \n                          var item = uniqueItems[i];   \n                          ids_selected_arr.cells.push({ \n                            \"row\" : item,\n                            \"id\"  : item\n                          });\n                        }\n                        \n                        //konwertuj na jsona\n                        const data = JSON.stringify(ids_selected_arr);\n                        \n                        //wyslij post\n                        fetch('/Console/rest/rest_api/data_view/alarms_ticket', {\n                          method: 'POST',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            mySessionId: '00000000-0000-0000-0000-000000000001', //TO DO: zmiana na realny id session\n                            mySessionLanguage: 'en_US'                           //TO DO: pobierane dynamicznie\n                          },\n                          body:data,\n                        })\n                        .then(response => response.json())\n                        .then(result => {\n                          console.log('Success:', result);\n                        })\n                        .catch(error => {\n                          console.log('Error:', error);\n                        });\n                      }else {\n                        console.log('Select at least one alarm.');\n                        //TO DO: wypisane komunikatu do loggera gui\n                        return;\n                      }",
							"tool_id": 957,
							"id": "close alarm",
							"label": "Close alarm",
							"isActive": "const changed = useSelector((state) => state.consumerContextsSomeDataChangedTS);// tylko po to aby usłuszeć zmainy DS\nreturn nearest?.dataStore?.checked?.length||false;"
						},
						{
							"component": "Tool",
							"icon": "rci-change-severity",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 958,
							"id": "change severity",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "Change severity"
						},
						{
							"component": "Tool",
							"icon": "rci-changelogs",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 959,
							"id": "changelog",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "Changelog"
						},
						{
							"component": "Tool",
							"icon": "rci-changelogs",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 436,
							"id": "changelog_table",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "Changelog Table"
						},
						{
							"component": "Tool",
							"icon": "rci-changelogs",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 960,
							"id": "chat_from_table_RW",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "Chat from table RW"
						},
						{
							"component": "Tool",
							"icon": "rci-changelogs",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 961,
							"id": "chat_from_table_RO",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "Chat from table RO"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-email-outline",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 423,
							"id": "email_notification",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "eMAIL Notification"
						},
						{
							"tool_id": 966,
							"id": "multi_channel_notifications",
							"label": "Notifications"
						},
						{
							"tool_id": 977,
							"id": "perform_actions",
							"label": "Perform an action"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-message-alert-outline",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 424,
							"id": "sms_notification",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "SMS Notification"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-delete-outline",
							"isOn": false,
							"action": "console.log('TODO action');",
							"tool_id": 427,
							"id": "delete entry",
							"rem": "parametry dla reactowej wersji aplikacji:",
							"label": "delete entry"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-mdi mdi-plus-box-outline",
							"action": "const ds = nearest.dataStore;\nconst newRow = Object.create(ds.items);\n\n// ustawianie inicjalnych wartości atrybutów zgodnie z konfiguracją CI (w data_description), tylko tych które są widoczne w kolumnach\nlet attrs =  ds.attributes;\nfor(let i=0; i< attrs.length; i++){\n  //ustawianie domyślnych wartości\n  //RBU -> poniżej propozycja obsłużenia pustych domyślnych wartości\n  //if(attrs[i].def_value || attrs[i].def_value==''){\n  if(attrs[i].def_value){\n    newRow[attrs[i].name] = attrs[i].def_value;\n  }\n}\n//TODO - obsłużyć dynamiczne wartości w def_value\n\nnewRow.updated_by = {updated_by:{web:{new_row: []}}, id:null};\n//generowanie tymczasowego unikalnego identyfikatora dla wiersza\nnewRow.id = new Date().getTime();\n\n//zaznaczenie dodanego wiersza\nds.checked = [newRow.id];\n\n//ds.items[newRow.id] = newRow;\nds.data.unshift(newRow);\nds.isDirty = true;\n\nnearest.setDataStore({...ds});",
							"tool_id": 428,
							"id": "new entry",
							"label": "new entry",
							"isActive": "return true"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-content-copy",
							"action": "const ds = nearest.dataStore;\n// pobierz zaznaczone wiersze i wybierz unikalne - lista id\nlet uniqueItems = [...new Set(ds.checked)];\nlet newData = [...nearest.dataStore.data];\n\n//wybieranie wiersza do skopiowania\nif (uniqueItems.length > 0){\n  let copiedRows = [];\n  for (let i = 0; i < uniqueItems.length; i++){\n  //kopiowanie wiersza\n    let copiedRow = Object.assign({}, ds.items[uniqueItems[i]]);\n    copiedRow.updated_by = {web:{new_row: [copiedRow.id]}};\n    copiedRow.updated_by.web.new_row = copiedRow.id;\n    //copiedRow.id = null;\n    copiedRow.id = new Date().getTime();\n    newData.unshift(copiedRow);\n  }\n    \n  //ds.isDirty = true;\n  nearest.setDataStore(\n    {...ds,\n    data: newData,\n    isDirty: true,\n    }\n  );                      \n  //nearest.setDataStore({...ds});\n}",
							"tool_id": 429,
							"id": "duplicate entry",
							"label": "duplicate entry",
							"isActive": "return nearest?.dataStore?.checked.length > 0 ? true : false"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-file-download-outline",
							"action": "nearest.setDataStore({doExport: true});",
							"tool_id": 430,
							"id": "export to xlsx",
							"label": "Export to XLSX",
							"isActive": "return true"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-content-save-outline",
							"action": "nearest.setDataStore({doSave: true});",
							"tool_id": 431,
							"id": "save changes",
							"label": "Save",
							"isActive": "return nearest?.dataStore?.isDirty === true"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-content-save-move-outline",
							"isOn": "return nearest?.dataStore?.isRelToCI === true",
							"action": "const ds = nearest.dataStore;\nnearest.setDataStore({isRelToCI : ds.isRelToCI === undefined ? true : !ds.isRelToCI});\nconsole.log('TODO: Powinien wyświetlić się formularz Relation to CI. Obsłużyć flagę isRelToCI ');",
							"tool_id": 432,
							"id": "Relation to CI",
							"label": "Relation to CI",
							"isActive": "return nearest?.dataStore?.checked.length > 0 ? true : false"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-logout-variant",
							"isOn": "return nearest?.dataStore?.isRelFromCI === true",
							"action": "const ds = nearest.dataStore;\nnearest.setDataStore({isRelFromCI : ds.isRelFromCI === undefined ? true : !ds.isRelFromCI});\nconsole.log('TODO: Powinien wyświetlić się formularz Relation to CI. Obsłużyć flagę isRelFromCI ');",
							"tool_id": 434,
							"id": "Relation from CI",
							"label": "Relation from CI",
							"isActive": "return nearest?.dataStore?.checked.length > 0 ? true : false"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-view-compact-outline",
							"isOn": "return nearest?.dataStore?.isTableEditor === true",
							"action": "const ds = nearest.dataStore;\n//ds.isTableEditor = (ds.isTableEditor === undefined) ? true : false;\nnearest.setDataStore({isTableEditor : ds.isTableEditor === undefined ? true : false});\nconsole.log('TODO: Powinien wyświetlić się formularz edycji kolumn. Obsłużyć flagę isTableEditor');",
							"tool_id": 435,
							"id": "View editor",
							"label": "View Editor",
							"isActive": "return true"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-arrow-up",
							"action": "const ds = nearest.dataStore;\nlet newChecked = [];\n  \nlet uniqueItems = [...new Set(ds.checked)];\nif (uniqueItems.length > 0){\n  for (let i = 0; i < ds.data.length; i++){\n    if (ds.checked[0] == ds.data[i].id){\n      if (i == 0){\n        newChecked[0] = ds.data[ds.data.length-1].id;\n      }else {\n        newChecked[0] = ds.data[i-1].id;\n      }\n      break;\n    }\n  }\n  \n} else {\n  newChecked[0] = ds.data[ds.data.length-1].id;\n}\nnearest.setDataStore({checked : newChecked});",
							"tool_id": 425,
							"id": "previous entry",
							"label": "previous entry",
							"isActive": "if (nearest?.dataStore?.data === undefined) return false; return nearest?.dataStore?.data.length > 0 ? true : false;"
						},
						{
							"component": "Tool",
							"icon": "mdi mdi-arrow-down",
							"action": "const ds = nearest.dataStore;\nlet newChecked = [];\n  \nlet uniqueItems = [...new Set(ds.checked)];\nif (uniqueItems.length > 0){\n  for (let i = 0; i < ds.data.length; i++){\n    if (ds.checked[0] == ds.data[i].id){\n      if (i == (ds.data.length - 1)){\n        newChecked[0] = ds.data[0].id;\n      }else {\n        newChecked[0] = ds.data[i+1].id;\n      }\n      break;\n    }\n  }\n  \n} else {\n  newChecked[0] = ds.data[0].id;\n}\nnearest.setDataStore({checked : newChecked});",
							"tool_id": 426,
							"id": "next entry",
							"label": "next entry",
							"isActive": "if (nearest?.dataStore?.data === undefined) return false; return nearest?.dataStore?.data.length > 0 ? true : false;"
						}
					],
					"right": []
				},
				{
					"idExt": 953,
					"component": "Table",
					"defaultFilter": {
						"alarm_status": "100,102,103"
					},
					"attributes": [
						{
							"format_as": "status_of_all",
							"def_value": "100",
							"is_user_insertable": false,
							"validator": null,
							"permitter": "if(row.alarm_status !== 101) allowEdit=true; else webix.message(me.trLabel('Unchangeable entity.'));",
							"label": "Status",
							"col_dtype": null,
							"name": "alarm_status",
							"is_form_editable": true,
							"options": [
								"100",
								"101",
								"102",
								"103"
							],
							"width": 60,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": false
						},
						{
							"format_as": "status_of_all",
							"def_value": "2",
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Severity",
							"col_dtype": null,
							"name": "alarm_severity",
							"is_form_editable": true,
							"options": [
								"0",
								"1",
								"2",
								"3",
								"4",
								"5"
							],
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": false
						},
						{
							"format_as": "textarea",
							"def_value": "alarm text",
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Comment",
							"col_dtype": null,
							"name": "comment",
							"is_form_editable": true,
							"options": null,
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": false,
							"is_user_editable": true,
							"is_cell_editable": true
						},
						{
							"format_as": "textarea",
							"def_value": "alarm text",
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Application",
							"col_dtype": null,
							"name": "alarm_application",
							"is_form_editable": false,
							"options": [
								"0",
								"2",
								"5"
							],
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "textarea",
							"def_value": "alarm node",
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Node",
							"col_dtype": null,
							"name": "alarm_node",
							"is_form_editable": false,
							"options": [
								"0",
								"2",
								"5"
							],
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "textarea",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Object",
							"col_dtype": null,
							"name": "alarm_object",
							"is_form_editable": false,
							"options": null,
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "script",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Opis",
							"col_dtype": null,
							"name": "alarm_textlong",
							"is_form_editable": false,
							"options": null,
							"width": 240,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "timestamp",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "First occurence",
							"col_dtype": null,
							"name": "alarm_firstevent_ts",
							"is_form_editable": false,
							"options": null,
							"width": 80,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "timestamp",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Last occurence",
							"col_dtype": null,
							"name": "alarm_lastevent_ts",
							"is_form_editable": false,
							"options": null,
							"width": 80,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "timestamp",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Last update",
							"col_dtype": null,
							"name": "alarm_lastupdate_ts",
							"is_form_editable": false,
							"options": null,
							"width": 80,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "textarea",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Alarm count",
							"col_dtype": null,
							"name": "alarm_count",
							"is_form_editable": false,
							"options": null,
							"width": 50,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "textarea",
							"def_value": "alarm procedure",
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Procedure",
							"col_dtype": null,
							"name": "alarm_procedure",
							"is_form_editable": false,
							"options": null,
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "textarea",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Impacted servies label",
							"col_dtype": null,
							"name": "itcust_impactedserviceslabels",
							"is_form_editable": false,
							"options": null,
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": false,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "select",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Owner ID",
							"col_dtype": null,
							"name": "alarm_ownerid",
							"is_form_editable": false,
							"options": "rest/rest_api/data_view/option_list?src_type=user",
							"width": 70,
							"is_form_viewable": true,
							"is_cell_viewable": false,
							"is_user_editable": true,
							"is_cell_editable": true
						},
						{
							"format_as": "textarea",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Alarm duration",
							"col_dtype": null,
							"name": "alarm_duration",
							"is_form_editable": true,
							"options": null,
							"width": 40,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": false,
							"is_cell_editable": false
						},
						{
							"format_as": "script",
							"def_value": "Zatwierdzono",
							"is_user_insertable": false,
							"validator": null,
							"permitter": null,
							"label": "Nagios Ack Comment",
							"col_dtype": null,
							"name": "gwnagios_ack_comment",
							"is_form_editable": true,
							"options": null,
							"width": 240,
							"is_form_viewable": true,
							"is_cell_viewable": false,
							"is_user_editable": true,
							"is_cell_editable": false
						},
						{
							"format_as": "script",
							"def_value": "Wyłączono",
							"is_user_insertable": false,
							"validator": null,
							"permitter": null,
							"label": "Nagios Postpone Comment",
							"col_dtype": null,
							"name": "gwnagios_postpone_comment",
							"is_form_editable": true,
							"options": null,
							"width": 240,
							"is_form_viewable": true,
							"is_cell_viewable": false,
							"is_user_editable": true,
							"is_cell_editable": false
						},
						{
							"format_as": "timestamp",
							"def_value": null,
							"is_user_insertable": false,
							"validator": null,
							"permitter": null,
							"label": "Nagios Postpone To",
							"col_dtype": null,
							"name": "gwnagios_postpone_to",
							"is_form_editable": true,
							"options": null,
							"width": 60,
							"is_form_viewable": true,
							"is_cell_viewable": false,
							"is_user_editable": true,
							"is_cell_editable": false
						},
						{
							"format_as": "select",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Select",
							"col_dtype": null,
							"name": "test_select",
							"is_form_editable": true,
							"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
							"width": 100,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": true
						},
						{
							"format_as": "multiselect",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Multiselect",
							"col_dtype": null,
							"name": "test_multiselect",
							"is_form_editable": true,
							"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
							"width": 100,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": true
						},
						{
							"format_as": "combo",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Combo",
							"col_dtype": null,
							"name": "test_combo",
							"is_form_editable": true,
							"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
							"width": 100,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": true
						},
						{
							"format_as": "select:tr",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Selecttr",
							"col_dtype": null,
							"name": "test_selecttr",
							"is_form_editable": true,
							"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
							"width": 100,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": true
						},
						{
							"format_as": "multiselect:tr",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Multiselecttr",
							"col_dtype": null,
							"name": "test_multiselecttr",
							"is_form_editable": true,
							"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
							"width": 100,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": true
						},
						{
							"format_as": "multicombo",
							"def_value": null,
							"is_user_insertable": true,
							"validator": null,
							"permitter": null,
							"label": "Multicombo",
							"col_dtype": null,
							"name": "test_multicombo",
							"is_form_editable": true,
							"options": "rest/rest_api/data_view/option_list?src_type=random_text&mode=name",
							"width": 100,
							"is_form_viewable": true,
							"is_cell_viewable": true,
							"is_user_editable": true,
							"is_cell_editable": true
						}
					],
					"id": 420,
					"url": "rest/rest_api/data_view/alarms?id=358"
				}
			],
			"cols": null
		},
		"nextViewName": null,
		"requires": [
			"app-dynamic/libs-ext/webix/codebase/webix.js",
			"resource/theme/${theme_name}/ext-wbx/base.css",
			"resource/theme/${theme_name}/ext-wbx/skin.js",
			"resource/theme/${theme_name}/ext-wbx/skin.css"
		]
	}
}